/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.Date;
import javax.swing.table.DefaultTableModel;
import model.EmployeeProfile;
import model.EmployeeProfileHistory;

/**
 *
 * @author mohitha
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    
    EmployeeProfileHistory employeeProfileHistory;
    public SearchJPanel(EmployeeProfileHistory employeeProfileHistory) {
        initComponents();
        setEmployeeProfileHistory(employeeProfileHistory);
        populateTable(getEmployeeProfileHistory());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createEmployeeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployeeHistory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNameSearch = new javax.swing.JTextField();
        btnNameSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        drpFields = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();

        setBackground(new java.awt.Color(239, 210, 141));

        createEmployeeLabel.setBackground(new java.awt.Color(153, 153, 153));
        createEmployeeLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        createEmployeeLabel.setForeground(new java.awt.Color(0, 71, 119));
        createEmployeeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createEmployeeLabel.setText("Search Employee");
        createEmployeeLabel.setToolTipText("To create new employee");

        tblEmployeeHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee Id", "Name", "Age", "Gender", "Start Date", "Level", "Team Info", "Position Title", "Cell Phone Number", "Email Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployeeHistory);

        jLabel1.setText("Search :");

        btnNameSearch.setText("Search");
        btnNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNameSearchActionPerformed(evt);
            }
        });

        jLabel4.setText("Select a field :");

        drpFields.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Employee ID", "Age", "Gender", "Level", "Team Info", "Position Title", "CellPhone Number", "Email Address" }));

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createEmployeeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(drpFields, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReset)
                        .addGap(18, 18, 18)
                        .addComponent(btnNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(187, 187, 187)))
                .addGap(244, 244, 244))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createEmployeeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txtNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(drpFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNameSearch)
                    .addComponent(btnReset))
                .addGap(102, 102, 102)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(235, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNameSearchActionPerformed
        // TODO add your handling code here:
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Name"))
            searchByName(txtNameSearch.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Employee ID"))
            searchByEmployeeId(Integer.parseInt(txtNameSearch.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Age"))
            searchByAge(Integer.parseInt(txtNameSearch.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Gender"))
            searchByGender(txtNameSearch.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Start Date"))
            searchByStartDate(txtNameSearch.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Level"))
            searchByLevel(Integer.parseInt(txtNameSearch.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Team Info"))
            searchByTeamInfo(txtNameSearch.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Position Title"))
            searchByPositionTitle(txtNameSearch.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("CellPhone Number"))
            searchByCellPhoneNumber(Integer.parseInt(txtNameSearch.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Email Address"))
            searchByEmailAddress(txtNameSearch.getText());
    }//GEN-LAST:event_btnNameSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        populateTable(getEmployeeProfileHistory());
    }//GEN-LAST:event_btnResetActionPerformed
    private void searchByName(String name){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getName().equalsIgnoreCase(name)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByEmployeeId(int eid){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getEmployeeId()==eid){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByAge(int age){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getAge()==age){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByGender(String gender){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getGender().equalsIgnoreCase(gender)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByStartDate(String date){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getStartDate().compareTo(new Date(date))>0){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByLevel(int level){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getLevel()==level){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByTeamInfo(String teamInfo){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getTeamInfo().equalsIgnoreCase(teamInfo)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByPositionTitle(String positionTitle){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getPositionTitle().equalsIgnoreCase(positionTitle)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByCellPhoneNumber(int cpn){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getCellPhoneNumber()==cpn){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByEmailAddress(String email){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEmployeeProfileHistory().getHistory()){
            if(ep.getEmailAddress().equalsIgnoreCase(email)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }

    public EmployeeProfileHistory getEmployeeProfileHistory() {
        return employeeProfileHistory;
    }

    public void setEmployeeProfileHistory(EmployeeProfileHistory employeeProfileHistory) {
        this.employeeProfileHistory = employeeProfileHistory;
    }
    
    private void populateTable(EmployeeProfileHistory employeeProfileHistory) {
        System.out.println(" populateTable -> EmployeeProfileHistory->"+employeeProfileHistory);
        
        DefaultTableModel model =(DefaultTableModel) tblEmployeeHistory.getModel();
        model.setRowCount(0);
        
        for(EmployeeProfile e: employeeProfileHistory.getHistory()){
            Object row[]=new Object[10];
            row[0] = e.getEmployeeId();
            row[1] = e.getName();
            row[2] = e.getAge();
            row[3] = e.getGender();
            row[4] = e.getStartDate();
            row[5] = e.getLevel();
            row[6] = e.getTeamInfo();
            row[7] = e.getPositionTitle();
            row[8] = e.getCellPhoneNumber();
            row[9] = e.getEmailAddress();
            
            model.addRow(row);
            
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNameSearch;
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel createEmployeeLabel;
    private javax.swing.JComboBox<String> drpFields;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEmployeeHistory;
    private javax.swing.JTextField txtNameSearch;
    // End of variables declaration//GEN-END:variables
}
